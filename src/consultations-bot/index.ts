import { Telegraf } from "telegraf";
import { config } from "../config/config.js";
import consultationsService from "../services/consultations.js";
import senderService from "../services/sender.js";
const consultationBot = new Telegraf(config.CONS_BOT_TOKEN);

const webPayment = config.URL_PAY_CONSULTATION
const webCall = config.URL_CALL_CONSULTATION
const webTerms = config.URL_TERMS
const webPrivacy = config.URL_PRIVACY



consultationBot.start(async (ctx) => {
    try {
        const commandText = ctx.message.text.toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        if (commandText === '/start@mrk_new_bot') {
            // –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.replyWithHTML(
            `<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}!</b>\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å –≤ —Å–µ—Ä–≤–∏—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.\n`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: "üìù–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—Éüìù", url: webCall }
                        ],
                        [
                            { text: "üí∞–û–ø–ª–∞—Ç–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—éüí∞", url: webPayment }
                        ],
                    ],
                }
            }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.reply(
            "–î–æ–∫—É–º–µ–Ω—Ç—ã",
            {
                reply_markup: {
                    keyboard: [
                        [
                            { text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ" },
                            { text: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏" }
                        ]
                    ],
                    resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–∏–º–∏
                    one_time_keyboard: false // –ö–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                }
            }
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log(ctx.message.from);

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Telegrams –∏ User
        await consultationsService.start({
            chat_id: ctx.message.from.id,
            first_name: ctx.message.from.first_name || "default",
            last_name: ctx.message.from.last_name || "default",
            username: ctx.message.from.username || "default",
        });

    } catch (e) {
        console.error("Error in /start command:", e);
    }
});
consultationBot.hears('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', async (ctx) => {
    await ctx.reply("–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç...", {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url: webTerms }
                ]
            ]
        }
    });
});

consultationBot.hears('–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', async (ctx) => {
    await ctx.reply("–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç...", {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url: webPrivacy }
                ]
            ]
        }
    });
});

consultationBot.on('text', async (ctx) => {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ Chats
        await consultationsService.saveMessage({
            chat_id: ctx.message.from.id,
            message: ctx.message.text,
            first_name: ctx.message.from.first_name || "default",
            last_name: ctx.message.from.last_name || "default",
            cause: "consultation_request"
        });

        await senderService.sendMessage({
                chat_id: ctx.message.from.id,
                letter: ctx.message.text,
                first_name: ctx.message.from.first_name || "nothing",
                last_name: ctx.message.from.last_name || "nothing",
                username: ctx.message.from.username || "nothing",
                cause: "consultation_request"
            }
        )
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");
    } catch (error) {
        console.error("Error saving message:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }
});


export { consultationBot };

