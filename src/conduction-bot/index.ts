import {Telegraf} from "telegraf";
import {config} from "../config/config.js";
import consultationsService from "../services/common-db.js";
import senderService from "../services/sender.js";
import {MessagesData} from "../types/common.js";
import {handlePolicyAgreement} from "../component/handlePolicyAgreement.js";
import {handleMessage} from "../component/handleMessage.js";
import {sendKeyboard} from "../component/sendKeyboard.js";


const token = process.env.NODE_ENV === 'production'
    ? config.CONDUCT_BOT_TOKEN
    : config.DEV_CONDUCT_BOT_TOKEN;

if (!token) {
    throw new Error('AnswererBot token is not defined!');
}
const conductionBot = new Telegraf(token);


const webTerms = config.URL_TERMS
const webPrivacy = config.URL_PRIVACY

const start =
    "<b>–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ–¥–µ–Ω–∏—è</b> - –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –¥–≤—É—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö ‚Äì —Å –º–∞–º–æ–π –∏ —Å —Ä–µ–±—ë–Ω–∫–æ–º. –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. üöÄ\n" +
    "\n" +
    "<b>–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç?</b>\n" +
    "\n" +
    "<b>–î–ª—è –º–∞–º—ã:</b> üë©\n" +
    "üí° –°–ø—Ä–∞–≤–∏–º—Å—è —Å –≤—ã–≥–æ—Ä–∞–Ω–∏–µ–º, –≤–µ—Ä–Ω–µ–º —Ç–≤–æ–∏ —Å–∏–ª—ã –∏ –±–∞–ª–∞–Ω—Å. –¢—ã —Å–Ω–æ–≤–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å —Ä–∞–¥–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞ –∏ –æ–±—Ä–µ—Ç–µ—à—å —Ä–µ—Å—É—Ä—Å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å. üåü\n" +
    "\n" +
    "<b>–î–ª—è –º–∞–ª—ã—à–∞:</b> üë∂\n" +
    "üë∂ –í–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –∏—Å—Ç–µ—Ä–∏–∫–∞–º–∏, –∫–∞–ø—Ä–∏–∑–∞–º–∏, –∑–∞–¥–µ—Ä–∂–∫–æ–π —Ä–µ—á–∏, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –≥–∞–¥–∂–µ—Ç–æ–≤, –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –ø–∏—Ç–∞–Ω–∏–µ–º –∏ –ø—Ä–∏—É—á–µ–Ω–∏–µ–º –∫ –≥–æ—Ä—à–∫—É. –ü—Ä–æ–∫–∞—á–∞–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–º–µ–Ω–∏—è –∏ –ø–æ–º–æ–∂–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—å –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–∏—Ä–æ–¥–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. üå±\n" +
    "\n" +
    "<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n" +
    "\n" +
    "üîπ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b> ‚Äì –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω, –ø–æ –≤—ã–±–æ—Ä—É. üíª\n" +
    "üîπ <b>–£–¥–æ–±–Ω—ã–µ —Å–æ–∑–≤–æ–Ω—ã</b>, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ WhatsApp/Telegram. üì≤\n" +
    "üîπ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</b> –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á—Ç–æ–±—ã —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. üìÖ\n" +
    "üîπ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ <b>–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–≤–æ–Ω–∞</b>, –≥–¥–µ —É—Ç–æ—á–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É –∏ –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å –º–∞–ª—ã—à–æ–º. üóìÔ∏è"

conductionBot.start(async (ctx) => {
    try {
        const commandText = ctx.message.text.toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        if (commandText === '/start@mrk_new_bot') {
            // –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.replyWithHTML(
            `<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}!\n\n</b>${start}`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ üìù", callback_data: 'apply_for_management'}
                        ],
                    ],
                }
            }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.reply(
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏  –∏–ª–∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É",
            {
                reply_markup: {
                    keyboard: [
                        [
                            {text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"},
                            {text: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"}
                        ]
                    ],
                    resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–∏–º–∏
                    one_time_keyboard: false // –ö–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                }
            }
        );

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Telegrams –∏ User
        await consultationsService.start({
            chat_id: ctx.message.from.id,
            first_name: ctx.message.from.first_name || "default",
            last_name: ctx.message.from.last_name || "default",
            username: ctx.message.from.username || "default",
        });

    } catch (e) {
        console.error("Error in /start command:", e);
    }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /request
conductionBot.command('request', async (ctx) => {
    await sendKeyboard(ctx, "–í—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É ...");

    const data = {
        chat_id: ctx.message.from.id,
        first_name: ctx.message.from.first_name,
        last_name: ctx.message.from.last_name,
        username: ctx.message.from.username,
        message: "–ü–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ",
        cause: 'conducting_request',
    };

    await handleMessage(data);

    const check = await consultationsService.checkPrivacyByClient(ctx.message.from.id);

    if (!check) {
        await ctx.reply(
            '–ù–∞ –ø–µ—Ä–≤–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Å–æ–∑–≤–æ–Ω–µ (20‚Äì30 –º–∏–Ω—É—Ç) –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å.\n' +
            '\n' +
            '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n',
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: "–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data: 'apply_for_privacy' }
                        ]
                    ],
                }
            }
        );
    } else {
        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ!\n' +
            '\n' +
            '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n' +
            '\n' +
            '–ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ –ú–°–ö), –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ.\n');
    }
});

conductionBot.hears('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', async (ctx) => {
    await handlePolicyAgreement(ctx, "–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç...", webTerms);
});

conductionBot.hears('–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', async (ctx) => {
    await handlePolicyAgreement(ctx, "–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç...", webPrivacy);
});

conductionBot.on('text', async (ctx) => {
    try {
      await sendKeyboard(ctx, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...");
        const data = {
            chat_id: ctx.message.from.id,
            first_name:ctx.message.from.first_name,
            last_name:ctx.message.from.last_name,
            username:ctx.message.from.username,
            message: ctx.message.text,
            cause: 'conducting_request'
        }
        await handleMessage(data);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
});

conductionBot.action('apply_for_management', async (ctx) => {

    await sendKeyboard(ctx, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞...");
    const data = {
        chat_id: ctx.update.callback_query.from.id,
        first_name:ctx.update.callback_query.from.first_name,
        last_name:ctx.update.callback_query.from.last_name,
        username:ctx.update.callback_query.from.username,
        message: "–ü–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ",
        cause: 'conducting_request'
    }
     await handleMessage(data);
    // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    const check = await consultationsService.checkPrivacyByClient(ctx.update.callback_query.from.id);

    if (!check) {
        await ctx.reply(
            '–ù–∞ –ø–µ—Ä–≤–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Å–æ–∑–≤–æ–Ω–µ (20‚Äì30 –º–∏–Ω—É—Ç) –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å.\n' +
            '\n' +
            '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n',
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: "–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data: 'apply_for_privacy' }
                        ]
                    ],
                }
            }
        );
    } else {
        await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ!\n' +
            '\n' +
            '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n' +
            '\n' +
            '–ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ –ú–°–ö), –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ.\n');
    }
});

conductionBot.action('apply_for_privacy', async (ctx) => {
    // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É

    await sendKeyboard(ctx, "–°–æ–≥–ª–∞—Å–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...");   // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    console.log(ctx.update.callback_query.from)
    const data = {
        chat_id: ctx.update.callback_query.from.id,
        first_name:ctx.update.callback_query.from.first_name,
        last_name:ctx.update.callback_query.from.last_name,
        username:ctx.update.callback_query.from.username,
        message: "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ",
        cause: 'privacy_request'
    }
    await handleMessage(data);
    await ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ!\n' +
        '\n' +
        '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n' +
        '\n' +
        '–ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ –ú–°–ö), –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ.\n');
});


export {conductionBot};

