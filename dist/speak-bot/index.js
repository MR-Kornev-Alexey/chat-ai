import { Telegraf } from "telegraf";
import { config } from "../config/config.js";
import consultationsService from "../services/common-db.js";
import { sendKeyboard } from "../component/sendKeyboard.js";
import { handleMessage } from "../component/handleMessage.js";
import { TARIFF_ALL_INCLUDED, TARIFF_I_AM, TEXT_START } from "../constants/speak.js";
import { handlePolicyAgreement } from "../component/handlePolicyAgreement.js";
const token = process.env.NODE_ENV === 'production'
    ? config.SPEAK_BOT_TOKEN
    : config.DEV_SPEAK_BOT_TOKEN;
if (!token) {
    throw new Error('AnswererBot token is not defined!');
}
const speakBot = new Telegraf(token);
const webSpeak = config.URL_SPEAK_INTENSIVE;
const webTerms = config.URL_TERMS;
const webPrivacy = config.URL_PRIVACY;
const paySpeakUndefended = config.URL_PAY_SPEAK_INDEPENDENT;
const paySpeakAll = config.URL_PAY_SPEAK_ALL;
speakBot.start(async (ctx) => {
    try {
        const commandText = ctx.message.text.toLowerCase();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        if (commandText === '/start@mrk_new_bot') {
            // –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            return;
        }
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.replyWithHTML(`<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å ${ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}!\n\n</b>${TEXT_START}`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üí∏ –û–ü–õ–ê–¢–ò–¢–¨ üí∏", callback_data: 'apply_for_tariff' },
                    ],
                    [
                        { text: "üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ üîó", url: webSpeak },
                    ],
                ],
            }
        });
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await ctx.reply("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏  –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø", {
            reply_markup: {
                keyboard: [
                    [
                        { text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ" },
                        { text: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏" }
                    ]
                ],
                resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–∏–º–∏
                one_time_keyboard: false // –ö–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
            }
        });
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Telegrams –∏ User
        await consultationsService.start({
            chat_id: ctx.message.from.id,
            first_name: ctx.message.from.first_name || "default",
            last_name: ctx.message.from.last_name || "default",
            username: ctx.message.from.username || "default",
        });
    }
    catch (e) {
        console.error("Error in /start command:", e);
    }
});
async function sendTariff(ctx, text, buttonText, url) {
    await ctx.replyWithHTML(text, {
        reply_markup: {
            inline_keyboard: [
                [{ text: buttonText, url }],
            ],
        },
    });
}
speakBot.command('link', async (ctx) => {
    await ctx.reply("–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç...", {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url: webSpeak }
                ]
            ]
        }
    });
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /request
speakBot.command('pay', async (ctx) => {
    await sendKeyboard(ctx, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–ª–∞—Ç—ã ...");
    const data = {
        chat_id: ctx.message.from.id,
        first_name: ctx.message.from.first_name,
        last_name: ctx.message.from.last_name,
        username: ctx.message.from.username,
        message: "–ü–µ—Ä–µ—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ä–µ—á–µ–≤–æ–≥–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞",
        cause: 'payment_press'
    };
    await handleMessage(data);
    await sendTariff(ctx, TARIFF_ALL_INCLUDED, "–û–ø–ª–∞—Ç–∏—Ç—å 18900 —Ä—É–±.", paySpeakAll);
    await sendTariff(ctx, TARIFF_I_AM, "–û–ø–ª–∞—Ç–∏—Ç—å 11900 —Ä—É–±.", paySpeakUndefended);
});
speakBot.action('apply_for_tariff', async (ctx) => {
    await ctx.answerCbQuery();
    await sendKeyboard(ctx, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–ª–∞—Ç—ã ...");
    const data = {
        chat_id: ctx.update.callback_query.from.id,
        first_name: ctx.update.callback_query.from.first_name,
        last_name: ctx.update.callback_query.from.last_name,
        username: ctx.update.callback_query.from.username,
        message: "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã —Ä–µ—á–µ–≤–æ–≥–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞",
        cause: 'speak_tariff_press',
    };
    await handleMessage(data);
    await sendTariff(ctx, TARIFF_ALL_INCLUDED, "–û–ø–ª–∞—Ç–∏—Ç—å 18900 —Ä—É–±.", paySpeakAll);
    await sendTariff(ctx, TARIFF_I_AM, "–û–ø–ª–∞—Ç–∏—Ç—å 11900 —Ä—É–±.", paySpeakUndefended);
});
speakBot.hears('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', async (ctx) => {
    await handlePolicyAgreement(ctx, "–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç...", webTerms);
});
speakBot.hears('–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', async (ctx) => {
    await handlePolicyAgreement(ctx, "–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç...", webPrivacy);
});
speakBot.on('text', async (ctx) => {
    try {
        await sendKeyboard(ctx, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...");
        const data = {
            chat_id: ctx.message.from.id,
            first_name: ctx.message.from.first_name,
            last_name: ctx.message.from.last_name,
            username: ctx.message.from.username,
            message: ctx.message.text,
            cause: 'speak_request'
        };
        await handleMessage(data);
    }
    catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
});
export { speakBot };
